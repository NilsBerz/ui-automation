pipeline{
    agent any
    triggers {
        pollSCM('*/1 * * * *')
    }
    stages{
        stage("Build"){
            steps{
                echo "Building web app"
            }
        }
        stage("Deploy staging"){
            steps{
                script{
                    deploy("STAGE")
                }
            }
        }
        stage("Test staging"){
            steps{
                script{
                    test("STAGE")
                }
            }
            post{
                always{
                    sh "ls -la"
                    sh "docker-compose down"
                }
                success{
                    echo "Success in stage ${env.STAGE_NAME}"
                    sh "bash send_notification.sh '${env.STAGE_NAME}' 0"
                }
                failure{
                    echo "Failure in stage ${env.STAGE_NAME}"
                    sh "bash send_notification.sh '${env.STAGE_NAME}' 1"
                }
            }
        }
        stage("Deploy prod"){
            steps{
                script{
                    deploy("PROD")
                }
            }
        }
        stage("Test prod"){
            steps{
                script{
                    test("PROD")
                }
            }
            post{
                always{
                    sh "docker-compose down"
                }
                success{
                    echo "Success in stage ${env.STAGE_NAME}"
                    sh "bash send_notification.sh '${env.STAGE_NAME}' 0"
                }
                failure{
                    echo "Failure in stage ${env.STAGE_NAME}"
                    sh "bash send_notification.sh '${env.STAGE_NAME}' 1"
                }
            }
        }
    }
}

def deploy(String environment){
    echo "Deploying to ${environment}"
}

def test(String environment){
    echo "Testing on ${environment}"
    sh "docker-compose up -d"
    allure([
        includeProperties: false,
        jdk: '',
        properties: [],
        reportBuildPolicy: 'ALWAYS',
        results: [[path: 'allure_test_results/allure-maven-plugin']]
    ])
    // publishHTML([
            // allowMissing: false, 
            // alwaysLinkToLastBuild: false,
            // keepAll: false, 
            // reportDir: 'allure_test_results/allure-maven-plugin', 
            // reportFiles: "index.html", 
            // reportName: "Test Report ${environment}", 
            // reportTitles: ''])
}